# src/cogniquery_crew/config/tasks.yaml

enhance_prompt_task:
  description: >
    Take the user's query: '{query}' and refine it into a single, highly detailed,
    and specific question that is ready for data analysis. First, examine the database
    schema using the available tools to understand what tables, columns, and data types
    are available. Then refine the user's query to be specific about which data fields
    should be analyzed, ensuring the question is feasible with the available data structure.
    The question must be self-contained and unambiguous.
  expected_output: >
    A single, refined, and detailed question in plain English that specifically references
    the available data fields and is feasible with the current database schema.

generate_sql_task:
  description: >
    Based on the refined question, write a single, syntactically correct SQL query
    to retrieve the necessary data. Use the provided database schema to ensure all
    table and column names are correct.
  expected_output: >
    A single, valid SQL query string. Do not include any explanations, only the query.

analyze_data_task:
  description: >
    Execute the SQL query to get the data. Then, using Python, perform a thorough
    analysis to answer the refined question. Generate exactly ONE visualization
    (e.g., a bar chart or line plot) to support your analysis.
    
    CRITICAL CHART REQUIREMENTS:
    - You MUST save the chart as 'output/chart.png' using matplotlib
    - Use plt.savefig('output/chart.png') - this exact path is required
    - Only create ONE chart per analysis to avoid conflicts
    - The chart will be automatically displayed in the Streamlit UI
    - Include matplotlib in your imports: import matplotlib.pyplot as plt
    - Do NOT import or use the 'os' module - it's restricted in this environment
    
    PYTHON CODE STRUCTURE:
    1. Import required libraries (pandas, matplotlib.pyplot)
    2. Process the data from SQL results
    3. Create your analysis and calculations  
    4. Generate ONE clear, professional chart
    5. Save the chart using plt.savefig('output/chart.png')
    6. Include a markdown table of your data
    
    IMPORTANT RESTRICTIONS:
    - Do NOT use 'import os' or any os module functions
    - Do NOT try to check file existence or directory contents
    - Simply save the chart with plt.savefig('output/chart.png') and trust it works
    - Focus on creating great visualizations, not file system operations
    
    Your final output must be a markdown-formatted text containing:
    1. A summary of your key findings
    2. The data you analyzed, presented in a markdown table
    3. Reference to the chart: "Chart saved as output/chart.png"
  expected_output: >
    A comprehensive analysis in markdown format, including a summary, a markdown table
    of the data, and confirmation that the chart was saved to 'output/chart.png'.

generate_report_task:
  description: >
    Take the markdown-formatted analysis and insights and compile them into a final,
    professional report.
  expected_output: >
    A confirmation message that the PDF report has been successfully created.

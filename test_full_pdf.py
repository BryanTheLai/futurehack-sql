#!/usr/bin/env python3
"""
Test script for complete PDF generation with charts and TLDR
"""

import sys
import os
import glob
import matplotlib.pyplot as plt
import numpy as np

# Add the src directory to the path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from cogniquery_crew.tools.pdf_generator import EnhancedPDFGenerator, TLDRExtractor

def create_test_charts():
    """Create some test charts for PDF generation"""
    print("📊 Creating test charts...")
    
    # Ensure output directory exists
    os.makedirs('output', exist_ok=True)
    
    # Chart 1: Bar chart
    fig, ax = plt.subplots(figsize=(8, 6))
    categories = ['Q1', 'Q2', 'Q3', 'Q4']
    values = [25, 30, 35, 40]
    ax.bar(categories, values, color='skyblue')
    ax.set_title('Quarterly Revenue (Test Data)')
    ax.set_ylabel('Revenue ($M)')
    plt.tight_layout()
    plt.savefig('output/test_chart_1.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    # Chart 2: Line chart
    fig, ax = plt.subplots(figsize=(8, 6))
    x = np.linspace(0, 10, 100)
    y = np.sin(x) * np.exp(-x/5)
    ax.plot(x, y, linewidth=2, color='red')
    ax.set_title('Sample Time Series Data')
    ax.set_xlabel('Time')
    ax.set_ylabel('Value')
    ax.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.savefig('output/test_chart_2.png', dpi=300, bbox_inches='tight')
    plt.close()
    
    print("✅ Test charts created")

def create_test_markdown():
    """Create a comprehensive test markdown file"""
    markdown_content = """# Comprehensive Test Report

## TLDR
- **Key Finding 1**: Revenue increased by 60% quarter over quarter
- **Key Finding 2**: Customer satisfaction improved significantly
- **Key Finding 3**: Operational efficiency gained through automation
- **Recommendation**: Continue current growth strategy with focus on customer retention

## Executive Summary

This comprehensive analysis demonstrates the effectiveness of our enhanced PDF generation system with proper image embedding and table rendering capabilities.

## Data Analysis

### Revenue Trends

The quarterly revenue analysis shows consistent growth:

| Quarter | Revenue ($M) | Growth Rate |
|---------|-------------|-------------|
| Q1      | 25.0        | -           |
| Q2      | 30.0        | 20%         |
| Q3      | 35.0        | 16.7%       |
| Q4      | 40.0        | 14.3%       |

![Quarterly Revenue Chart](output/test_chart_1.png)

### Performance Metrics

The following time series shows our key performance indicator:

![Sample Time Series](output/test_chart_2.png)

## Technical Details

### Database Schema
```sql
CREATE TABLE revenue (
    quarter VARCHAR(2),
    amount DECIMAL(10,2),
    growth_rate DECIMAL(5,2)
);
```

### Key Metrics
- **Total Revenue**: $130M
- **Average Growth**: 17%
- **Customer Satisfaction**: 94%

## Conclusions

The enhanced PDF generation system successfully:

1. **Embeds images properly** using Base64 encoding
2. **Renders tables correctly** with proper styling
3. **Maintains formatting** throughout the document
4. **Provides TLDR extraction** for quick insights

## Recommendations

1. Continue monitoring quarterly trends
2. Implement customer feedback loop
3. Optimize operational processes
4. Expand market reach

---
*Report generated by Enhanced CogniQuery System*
"""
    
    with open('test_full_report.md', 'w', encoding='utf-8') as f:
        f.write(markdown_content)
    
    print("✅ Test markdown report created")
    return markdown_content

def test_complete_system():
    """Test the complete PDF generation and TLDR extraction system"""
    print("🧪 Testing Complete PDF Generation System")
    print("=" * 50)
    
    # Create test data
    create_test_charts()
    markdown_content = create_test_markdown()
    
    # Test TLDR extraction
    print("\n📋 Testing TLDR Extraction...")
    extractor = TLDRExtractor()
    tldr = extractor.extract_tldr(markdown_content)
    print(f"✅ TLDR extracted ({len(tldr)} characters):")
    print(f"   {tldr[:100]}...")
    
    # Test PDF generation
    print("\n📄 Testing PDF Generation...")
    generator = EnhancedPDFGenerator()
    
    try:
        pdf_bytes = generator.create_pdf(markdown_content)
        pdf_path = "output/test_complete_report.pdf"
        
        with open(pdf_path, 'wb') as f:
            f.write(pdf_bytes)
        print(f"✅ PDF generated successfully: {pdf_path}")
        
        # Check if file exists and has content
        if os.path.exists(pdf_path):
            file_size = os.path.getsize(pdf_path)
            print(f"📊 PDF file size: {file_size:,} bytes")
            
            if file_size > 50000:  # Reasonable size for PDF with images
                print("🎉 PDF appears to contain embedded content (good size)")
            else:
                print("⚠️  PDF might be missing content (small size)")
        
    except Exception as e:
        print(f"❌ PDF generation failed: {e}")
        return False
    
    # Check for chart files
    chart_files = glob.glob('output/test_chart_*.png')
    print(f"\n📊 Found {len(chart_files)} chart files:")
    for chart in chart_files:
        print(f"   - {chart}")
    
    print("\n🎉 Complete system test finished!")
    return True

if __name__ == "__main__":
    success = test_complete_system()
    if success:
        print("\n✅ All tests passed! The enhanced system is ready for production.")
    else:
        print("\n❌ Some tests failed. Please check the output above.")
